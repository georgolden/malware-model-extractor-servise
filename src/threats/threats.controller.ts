import {
  Body,
  Controller,
  Get,
  Param,
  Patch,
  Post,
  Query,
  UploadedFile,
  UseInterceptors,
  ValidationPipe,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { Threat } from './data/threats.interface';
import { GetThreatFilterDto } from './dto/get-threat-filter.dto';
import { ThreatCommentValidationPipe } from './pipes/threat-comment-validation.pipe';
import { ThreatStatusValidationPipe } from './pipes/threat-status-validation.pipe';
import { ThreatStatus } from './threat-status.enum';
import { Threatent } from './threat.entity';
import { ThreatsService } from './threats.service';

// here post request with file
@Controller('/threats')
export class ThreatsController {
  constructor(private threatsService: ThreatsService) {}

  @Get()
  getAllThreats(@Query(ValidationPipe) filterDto: GetThreatFilterDto) {
    return this.threatsService.getAllThreats(filterDto);
  }

  @Get('/:id')
  getThreatById(@Param('id') id: string) {
    return this.threatsService.getThreatById(id);
  }

  @Post('/upload')
  @UseInterceptors(FileInterceptor('file'))
  uploadFile(@UploadedFile() file) {
    return this.threatsService.createThreat(
      file.buffer.toString(),
      file.originalname,
    );
  }

  @Patch('/:id/status')
  updateThreatStatus(
    @Param('id') id: string,
    @Body('status', ThreatStatusValidationPipe) status: ThreatStatus,
    @Body('comment', ThreatCommentValidationPipe) comment: string,
  ): Promise<Threatent> {
    return this.threatsService.updateThreatStatus(id, status, comment);
  }
}
