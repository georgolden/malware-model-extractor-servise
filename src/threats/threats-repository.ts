import { EntityRepository, Repository } from 'typeorm';
import { Threat } from './data/threats.interface';
import { GetThreatFilterDto } from './dto/get-threat-filter.dto';
import { Threatent } from './threat.entity';
import { ThreatStatus } from './threat-status.enum';

@EntityRepository(Threatent)
export class ThreatsRepository extends Repository<Threatent> {
  async createThreat(obj): Promise<Threatent> {
    const threat = new Threatent();
    for (const key in obj) {
      threat[key] = obj[key];
    }

    threat.status = ThreatStatus.PENDING;
    await threat.save();

    return threat;
  }

  async getAllThreats(filterDto: GetThreatFilterDto): Promise<Threatent[]> {
    const { status, comment } = filterDto;
    const query = this.createQueryBuilder('report');

    if (status) {
      query.andWhere('report.status = :status', { status });
    }

    // if (comment) {
    //   query.andWhere('report.comment = :comment', { comment });
    // }

    const reports = await query.getMany();
    return reports;
  }
}
