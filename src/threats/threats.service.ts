import { Inject, Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { ThreatsExtractor } from './threats-extractor';
import { Threatent } from './threat.entity';
import { ThreatsRepository } from './threats-repository';
import { Threat } from './data/threats.interface';
import { ThreatStatus } from './threat-status.enum';
import { GetThreatFilterDto } from './dto/get-threat-filter.dto';

@Injectable()
export class ThreatsService {
  constructor(
    @InjectRepository(ThreatsRepository)
    private threatsRepository: ThreatsRepository,
    @Inject(ThreatsExtractor)
    private threatExtraxtor: ThreatsExtractor,
  ) {}

  async createThreat(file: any, fileName: any) {
    const parsed = await this.threatExtraxtor.asyncParse(file, fileName);

    return await this.threatsRepository.createThreat(parsed);
  }

  async getThreatById(id: string): Promise<Threatent> {
    const found = await this.threatsRepository.findOne(id);

    if (!found) {
      throw new NotFoundException(`threat with ${id} not found`);
    }

    return found;
  }

  async getAllThreats(filterDto: GetThreatFilterDto): Promise<Threatent[]> {
    return this.threatsRepository.getAllThreats(filterDto);
  }

  async updateThreatStatus(
    id: string,
    status: ThreatStatus,
    comment: string,
  ): Promise<Threatent> {
    const threat = await this.getThreatById(id);
    threat.status = status;
    threat.comment = comment;

    await threat.save();
    return threat;
  }
}
